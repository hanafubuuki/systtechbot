version: '3.9'

# Production версия docker-compose для использования образов из GitHub Container Registry
# Использование: docker-compose -f docker-compose.prod.yml up

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    container_name: systtechbot_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-systtechbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
      POSTGRES_DB: ${POSTGRES_DB:-systtechbot}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-systtechbot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - systtechbot_network

  # Telegram Bot (образ из registry)
  bot:
    # Использование образа из GitHub Container Registry
    # IMAGE_TAG позволяет переключаться между версиями: latest, sha-abc123, pr-45
    image: ghcr.io/hanafubuuki/systtechbot-bot:${IMAGE_TAG:-latest}
    container_name: systtechbot_bot
    environment:
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DATABASE_URL: ${DATABASE_URL:-postgresql://systtechbot:dev_password_change_in_production@postgres:5432/systtechbot}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      OPENAI_MODEL: ${OPENAI_MODEL:-openai/gpt-oss-20b:free}
      MAX_TOKENS: ${MAX_TOKENS:-1000}
      TEMPERATURE: ${TEMPERATURE:-0.7}
      MAX_CONTEXT_MESSAGES: ${MAX_CONTEXT_MESSAGES:-10}
      OPENAI_TIMEOUT: ${OPENAI_TIMEOUT:-30}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - systtechbot_network

  # FastAPI сервис статистики (образ из registry)
  api:
    # Использование образа из GitHub Container Registry
    image: ghcr.io/hanafubuuki/systtechbot-api:${IMAGE_TAG:-latest}
    container_name: systtechbot_api
    environment:
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DATABASE_URL: ${DATABASE_URL:-postgresql://systtechbot:dev_password_change_in_production@postgres:5432/systtechbot}
      POSTGRES_USER: ${POSTGRES_USER:-systtechbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_in_production}
      POSTGRES_DB: ${POSTGRES_DB:-systtechbot}
      API_MODE: ${API_MODE:-real}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      API_CORS_ORIGINS: ${API_CORS_ORIGINS:-http://localhost:3000}
      API_MOCK_SEED: ${API_MOCK_SEED:-42}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      OPENAI_MODEL: ${OPENAI_MODEL:-openai/gpt-oss-20b:free}
      MAX_TOKENS: ${MAX_TOKENS:-1000}
      TEMPERATURE: ${TEMPERATURE:-0.7}
      MAX_CONTEXT_MESSAGES: ${MAX_CONTEXT_MESSAGES:-10}
      OPENAI_TIMEOUT: ${OPENAI_TIMEOUT:-30}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - systtechbot_network

  # Next.js Frontend (образ из registry)
  frontend:
    # Использование образа из GitHub Container Registry
    image: ghcr.io/hanafubuuki/systtechbot-frontend:${IMAGE_TAG:-latest}
    container_name: systtechbot_frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      API_URL: http://api:8000
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - systtechbot_network

networks:
  systtechbot_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

# Примеры использования:
#
# 1. Запуск с latest версией (по умолчанию):
#    docker-compose -f docker-compose.prod.yml up
#
# 2. Запуск с конкретной версией по commit SHA:
#    IMAGE_TAG=sha-abc1234 docker-compose -f docker-compose.prod.yml up
#
# 3. Запуск версии из Pull Request:
#    IMAGE_TAG=pr-45 docker-compose -f docker-compose.prod.yml up
#
# 4. Pull образов перед запуском:
#    docker-compose -f docker-compose.prod.yml pull
#    docker-compose -f docker-compose.prod.yml up

