"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dashboard –∏ Chat"""

import asyncio
import logging
import sys
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, str(Path(__file__).parent.parent))

from config import load_config
from services.database import close_db, get_pool, init_db

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def create_test_data() -> None:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    await init_db()

    pool = await get_pool()

    async with pool.connection() as conn:
        async with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            await cur.execute("SELECT COUNT(*) FROM users")
            user_count = (await cur.fetchone())[0]

            if user_count > 0:
                logger.info(f"–í –ë–î —É–∂–µ –µ—Å—Ç—å {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                response = input("–°–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ")
                if response.lower() != 'y':
                    logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return

            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –°–æ–∑–¥–∞–µ–º 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_ids = []
            for i in range(1, 11):
                await cur.execute(
                    """
                    INSERT INTO users (telegram_user_id, first_name, created_at)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (telegram_user_id) DO NOTHING
                    RETURNING id
                    """,
                    (1000 + i, f"TestUser{i}", datetime.now() - timedelta(days=60 - i*5))
                )
                result = await cur.fetchone()
                if result:
                    user_ids.append(result[0])
                    logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TestUser{i}")

            # –°–æ–∑–¥–∞–µ–º 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤
            chat_ids = []
            for i in range(1, 11):
                await cur.execute(
                    """
                    INSERT INTO chats (telegram_chat_id, created_at)
                    VALUES (%s, %s)
                    ON CONFLICT (telegram_chat_id) DO NOTHING
                    RETURNING id
                    """,
                    (2000 + i, datetime.now() - timedelta(days=60 - i*5))
                )
                result = await cur.fetchone()
                if result:
                    chat_ids.append(result[0])
                    logger.info(f"–°–æ–∑–¥–∞–Ω —á–∞—Ç {2000 + i}")

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            message_count = 0

            for day in range(90):
                current_date = datetime.now() - timedelta(days=90 - day)

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è
                # –ë—É–¥–Ω–∏–µ –¥–Ω–∏ –±–æ–ª—å—à–µ, –≤—ã—Ö–æ–¥–Ω—ã–µ –º–µ–Ω—å—à–µ
                is_weekend = current_date.weekday() >= 5
                base_messages = 10 if is_weekend else 30

                messages_per_day = base_messages + (day % 5) * 2

                for msg in range(messages_per_day):
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç
                    user_id = user_ids[msg % len(user_ids)]
                    chat_id = chat_ids[msg % len(chat_ids)]

                    # –ß–µ—Ä–µ–¥—É–µ–º —Ä–æ–ª–∏
                    role = 'user' if msg % 2 == 0 else 'assistant'

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
                    content = f"Test message {message_count}: " + "Lorem ipsum " * (msg % 10 + 1)
                    length = len(content)

                    await cur.execute(
                        """
                        INSERT INTO messages (user_id, chat_id, role, content, length, created_at)
                        VALUES (%s, %s, %s, %s, %s, %s)
                        """,
                        (user_id, chat_id, role, content, length, current_date)
                    )
                    message_count += 1

                if day % 10 == 0:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")

            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:")
            logger.info(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
            logger.info(f"  - –ß–∞—Ç–æ–≤: {len(chat_ids)}")
            logger.info(f"  - –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await cur.execute("SELECT COUNT(*) FROM users WHERE deleted_at IS NULL")
            total_users = (await cur.fetchone())[0]

            await cur.execute("SELECT COUNT(*) FROM chats WHERE deleted_at IS NULL")
            total_chats = (await cur.fetchone())[0]

            await cur.execute("SELECT COUNT(*) FROM messages WHERE deleted_at IS NULL")
            total_messages = (await cur.fetchone())[0]

            await cur.execute("SELECT AVG(length) FROM messages WHERE deleted_at IS NULL")
            avg_length = (await cur.fetchone())[0]

            logger.info("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–î:")
            logger.info(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            logger.info(f"  - –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}")
            logger.info(f"  - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
            logger.info(f"  - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {avg_length:.1f}")

    await close_db()
    logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ!")


async def clear_test_data() -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""

    logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î!")
    response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'DELETE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")

    if response != 'DELETE':
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    await init_db()

    pool = await get_pool()

    async with pool.connection() as conn:
        async with conn.cursor() as cur:
            logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")

            await cur.execute("DELETE FROM messages")
            await cur.execute("DELETE FROM chats")
            await cur.execute("DELETE FROM users")

            logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")

    await close_db()


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if len(sys.argv) > 1 and sys.argv[1] == '--clear':
        await clear_test_data()
    else:
        try:
            config = load_config()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {config.database_url.split('@')[1]}")
            await create_test_data()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            sys.exit(1)


if __name__ == "__main__":
    # Fix for Windows
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    asyncio.run(main())

