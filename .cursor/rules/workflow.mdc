---
alwaysApply: false
---
# Workflow разработки systtechbot

**Для:** Code Assistant (Cursor AI, GitHub Copilot, и т.д.)
**Документы:** [vision.md](../../doc/vision.md) | [conventions.mdc](conventions.mdc) | [tasklist.md](../../doc/tasklist.md)

**См. также:** [workflow_tech_debt.mdc](workflow_tech_debt.mdc) — для работы с техническим долгом

---

## Основные правила

### 1. Строго по плану

- Выполняй задачи **только** из [tasklist.md](../../doc/tasklist.md)
- Итерации **строго последовательно** (0 → 1 → 2 → ... → 7)
- Не пропускай задачи
- Не добавляй функции "на будущее"

### 2. Итерация = цикл

Каждая итерация проходит через:

```
Согласование → Реализация → Тестирование → Коммит → Переход
```

---

## Пошаговый процесс

### Шаг 1: Согласование

**Перед началом итерации:**

1. Прочитай задачи текущей итерации из [tasklist.md](../../doc/tasklist.md)
2. Предложи решение с **отрезками кода**:
   ```
   Итерация N: [Название]

   Задача 1: [название]
   Файл: path/to/file.py
   Код:
   ```python
   # предложенный код
   ```

   Задача 2: ...
   ```
3. Объясни подход **кратко**
4. **Дождись подтверждения** от пользователя

**❌ НЕ пиши код без согласования!**

---

### Шаг 2: Реализация

**После получения ОК:**

1. Создай/измени файлы согласно плану
2. Следуй [conventions.mdc](conventions.mdc)
3. Проверь:
   - ✅ Код соответствует KISS
   - ✅ Нет дублирования из vision.md
   - ✅ Обработка ошибок везде
   - ✅ Type hints для **ВСЕХ** публичных функций (Python 3.11+ синтаксис)
   - ✅ Guard clauses для nullable (например: `if not message.from_user: return`)
   - ✅ Нет magic strings (используй Enum из constants.py)
   - ✅ Нет глобальных side effects (загружай config внутри функций)

---

### Шаг 3: Проверка качества кода (ОБЯЗАТЕЛЬНО)

**После реализации, перед тестированием:**

1. **Форматирование:**
   ```bash
   uv run ruff format .
   ```
   - Если есть изменения — покажи их пользователю

2. **Линтинг:**
   ```bash
   uv run ruff check .
   ```
   - Все ошибки должны быть исправлены
   - Покажи результат: "✅ All checks passed!"

3. **Проверка типов:**
   ```bash
   uv run mypy bot.py handlers/ services/ roles/ config.py
   ```
   - mypy должен показать 0 ошибок
   - Если есть ошибки — исправить перед продолжением

4. **Тесты:**
   ```bash
   uv run pytest tests/ -v
   ```
   - Все тесты должны быть зелеными
   - Никаких новых падений

**❌ НЕ переходи дальше, если хотя бы одна проверка не прошла!**

---

### Шаг 4: Проверка результата

**После прохождения автоматических проверок:**

1. Покажи результаты:
   ```
   ✅ Реализовано:
   - Файл1: изменение1
   - Файл2: изменение2

   ✅ Проверки качества:
   - ruff format: OK
   - ruff check: All checks passed!
   - mypy: Success: no issues found
   - pytest: all passed

   Готово к ручному тестированию.
   ```

2. Напомни тест из tasklist.md
3. **Дождись подтверждения** от пользователя

**❌ НЕ переходи к следующей задаче без подтверждения!**

---

### Шаг 5: Обновление прогресса

**После подтверждения:**

1. Обнови [tasklist.md](../../doc/tasklist.md):
   - Отметь выполненные задачи: `- [x]`
   - Обнови счетчики в таблице прогресса
   - Обнови статусы итераций
   - Обнови процент выполнения

2. Пример изменения:
   ```markdown
   | 0 | Инфраструктура | ✅ Завершено | 5/5 | make install работает | 2025-10-10 |

   **Прогресс:** 5/25 задач (20%)
   ```

---

### Шаг 6: Коммит

**После обновления tasklist:**

```bash
git add .
git commit -m "feat(iter-N): краткое описание"
git push origin main
```

**Формат коммита:**
- `feat(iter-0): setup project structure`
- `feat(iter-1): add hello world bot`
- `feat(iter-2): integrate OpenAI API`
- и т.д.

**Для технического долга:** `refactor(tech-debt-N): описание`

---

### Шаг 7: Переход к следующей итерации

**После успешного коммита:**

1. Спроси разрешение:
   ```
   Итерация N завершена ✅

   Метрики качества:
   - Форматирование: ✅
   - Линтинг: ✅ All checks passed
   - Типизация: ✅ 0 mypy errors
   - Тесты: ✅ all passed

   Следующая: Итерация N+1 - [Название]
   Задачи:
   - [ ] ...
   - [ ] ...

   Переходим к согласованию?
   ```

2. **Дождись ОК** от пользователя
3. Вернись к **Шагу 1**

---

## Частые ситуации

### Если lint/typecheck не проходит

```
1. Покажи ошибки:
   - Файл: path/to/file.py
   - Строка: XX
   - Ошибка: [описание]

2. Предложи исправление с кодом

3. Дождись согласия

4. Исправь

5. Повтори проверку: uv run ruff check . && uv run mypy ...
```

**❌ НЕ игнорируй ошибки линтера/mypy!**

---

### Если тест упал

```
1. Сообщи о проблеме:
   ❌ Test failed: test_name
   Error: [описание]

2. Проанализируй причину

3. Предложи исправление:
   - Либо исправить код
   - Либо обновить тест (если поведение изменилось намеренно)

4. Дождись согласия

5. Исправь

6. Повтори: uv run pytest tests/ -v
```

**Принцип:** Тесты — это контракт. Если они падают, либо код неправильный, либо контракт устарел.

**❌ НЕ переходи к следующей задаче с непройденным тестом!**

---

### Если нужно что-то изменить

```
1. Покажи текущий код
2. Предложи изменение
3. Объясни почему
4. Дождись согласия
5. Примени изменение
```

**❌ НЕ меняй код без согласования!**

---

### Если нужна новая зависимость

```
1. Проверь [vision.md → Технологии](../../doc/vision.md#1-технологии)
2. Если там нет - спроси у пользователя
3. Дождись разрешения
4. Добавь в pyproject.toml (dependencies)
5. Выполни: uv sync
```

**❌ НЕ добавляй зависимости без разрешения!**

---

## Формат коммуникации

### ✅ Хорошо

```
Итерация 0: Инфраструктура

Предлагаю создать:

1. pyproject.toml
[project]
name = "systtechbot"
version = "0.1.0"
requires-python = ">=3.11"
dependencies = [
    "aiogram>=3.0.0,<4.0.0",
    "openai>=1.0.0,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
]

2. .gitignore
.venv/
.env
bot.log
__pycache__/
uv.lock

3. Makefile
[код]

Подход:
- Минимальный набор зависимостей
- Стандартный .gitignore для Python
- Makefile для быстрого старта

Согласны?
```

### ❌ Плохо

```
Создал все файлы. Готово.
```

---

## Checklist перед коммитом

### Обязательные проверки

- [ ] `uv run ruff format .` — код отформатирован
- [ ] `uv run ruff check .` — 0 ошибок линтера
- [ ] `uv run mypy bot.py handlers/ services/ roles/ config.py` — 0 ошибок типов
- [ ] `uv run pytest tests/ -v` — все тесты зеленые

### Код и процесс

- [ ] Все задачи итерации выполнены
- [ ] Тест из tasklist.md пройден
- [ ] tasklist.md обновлен
- [ ] Код следует conventions.mdc:
  - [ ] Type hints для ВСЕХ публичных функций
  - [ ] Guard clauses для nullable
  - [ ] Нет magic strings/numbers
  - [ ] Нет глобальных side effects
  - [ ] Docstrings где нужно
- [ ] Получено подтверждение от пользователя

### Быстрая проверка

Или используй одну команду:
```bash
uv run ruff format . && uv run ruff check . && uv run mypy bot.py handlers/ services/ roles/ config.py && uv run pytest tests/ -v
```

На Windows PowerShell:
```powershell
uv run ruff format .; if ($?) { uv run ruff check . }; if ($?) { uv run mypy bot.py handlers/ services/ roles/ config.py }; if ($?) { uv run pytest tests/ -v }
```

Или через Makefile (если доступен):
```bash
make quality
```

---

## Важно!

1. **Всегда дожидайся подтверждения** перед действиями
2. **Никогда не пропускай проверки качества** (`make quality` или ручные проверки)
3. **Никогда не пропускай тесты**
4. **Обновляй tasklist.md** после каждой итерации
5. **Делай коммиты** после каждой итерации
6. **Следуй KISS** — не усложняй
7. **Type hints обязательны** — для всех публичных функций
8. **Coverage >= 80%** — добавляй тесты для нового кода

---

## Метрики качества

После рефакторинга (2025-10-11) проект должен соответствовать:

| Метрика | Требование | Как проверить |
|---------|-----------|---------------|
| **Форматирование** | ruff (line-length: 100) | `uv run ruff format --check .` |
| **Линтинг** | 0 ошибок | `uv run ruff check .` |
| **Типизация** | mypy strict, 0 ошибок | `uv run mypy bot.py handlers/ services/ roles/ config.py` |
| **Тесты** | 100% pass | `uv run pytest tests/ -v` |
| **Coverage** | >= 80% | `uv run pytest --cov=. --cov-report=term-missing` |

---

**Версия:** 2.0  
**Дата создания:** 2025-10-10  
**Последнее обновление:** 2025-10-11 (после рефакторинга)  
**См. также:** [workflow_tech_debt.mdc](workflow_tech_debt.mdc) для работы с техническим долгом
