"""–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

import sys
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

import pytest
from handlers.commands import cmd_clear, cmd_help, cmd_start


@pytest.fixture
def mock_message():
    """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç Message –æ—Ç aiogram"""
    message = MagicMock()
    message.from_user.id = 12345
    message.from_user.first_name = "–ò–≤–∞–Ω"
    message.chat.id = 67890
    message.answer = AsyncMock()
    return message


@pytest.mark.asyncio
async def test_cmd_start_with_user_name(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await cmd_start(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    mock_message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
    call_args = mock_message.answer.call_args[0][0]
    assert "–ü—Ä–∏–≤–µ—Ç, –ò–≤–∞–Ω!" in call_args
    assert "AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" in call_args


@pytest.mark.asyncio
async def test_cmd_start_without_user_name(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    mock_message.from_user.first_name = None

    await cmd_start(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "–¥—Ä—É–≥" –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
    call_args = mock_message.answer.call_args[0][0]
    assert "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!" in call_args


@pytest.mark.asyncio
async def test_cmd_start_with_empty_name(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º"""
    mock_message.from_user.first_name = ""

    await cmd_start(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "–¥—Ä—É–≥" –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏
    call_args = mock_message.answer.call_args[0][0]
    assert "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!" in call_args


@pytest.mark.asyncio
async def test_cmd_help(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help"""
    await cmd_help(mock_message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    mock_message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∫–∏
    call_args = mock_message.answer.call_args[0][0]
    assert "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã" in call_args
    assert "/start" in call_args
    assert "/help" in call_args
    assert "/clear" in call_args


@pytest.mark.asyncio
async def test_cmd_help_contains_all_commands(mock_message):
    """–¢–µ—Å—Ç —á—Ç–æ /help —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    await cmd_help(mock_message)

    call_args = mock_message.answer.call_args[0][0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã
    assert "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ" in call_args
    assert "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É" in call_args
    assert "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" in call_args


@pytest.mark.asyncio
async def test_cmd_clear(mock_message):
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /clear"""
    with patch("handlers.commands.clear_context") as mock_clear:
        await cmd_clear(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_clear.assert_called_once_with(mock_message.from_user.id, mock_message.chat.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        mock_message.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        call_args = mock_message.answer.call_args[0][0]
        assert "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞" in call_args


@pytest.mark.asyncio
async def test_cmd_clear_uses_correct_ids(mock_message):
    """–¢–µ—Å—Ç —á—Ç–æ /clear –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ user_id –∏ chat_id"""
    mock_message.from_user.id = 99999
    mock_message.chat.id = 11111

    with patch("handlers.commands.clear_context") as mock_clear:
        await cmd_clear(mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        mock_clear.assert_called_once_with(99999, 11111)


@pytest.mark.asyncio
async def test_all_commands_call_answer(mock_message):
    """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º /start
    await cmd_start(mock_message)
    assert mock_message.answer.call_count == 1

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    mock_message.answer.reset_mock()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º /help
    await cmd_help(mock_message)
    assert mock_message.answer.call_count == 1

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    mock_message.answer.reset_mock()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º /clear
    with patch("handlers.commands.clear_context"):
        await cmd_clear(mock_message)
        assert mock_message.answer.call_count == 1


@pytest.mark.asyncio
async def test_cmd_start_with_special_characters_in_name(mock_message):
    """–¢–µ—Å—Ç /start —Å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    mock_message.from_user.first_name = "–ò–≤–∞–Ω-–ü–µ—Ç—Ä_123"

    await cmd_start(mock_message)

    call_args = mock_message.answer.call_args[0][0]
    assert "–ü—Ä–∏–≤–µ—Ç, –ò–≤–∞–Ω-–ü–µ—Ç—Ä_123!" in call_args


@pytest.mark.asyncio
async def test_cmd_help_has_emoji(mock_message):
    """–¢–µ—Å—Ç —á—Ç–æ /help —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await cmd_help(mock_message)

    call_args = mock_message.answer.call_args[0][0]
    assert "üìñ" in call_args or "üí¨" in call_args
