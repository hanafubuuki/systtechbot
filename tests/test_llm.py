"""–¢–µ—Å—Ç—ã –¥–ª—è LLM —Å–µ—Ä–≤–∏—Å–∞"""

import sys
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

import pytest
from openai import APIConnectionError, APIStatusError, APITimeoutError, RateLimitError

from config import Config
from services.llm import get_llm_response


def test_token_cleanup():
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –∏–∑ services/llm.py
    def clean_tokens(answer: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        if not answer:
            return answer

        tokens_to_remove = [
            "<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>",
            "<|begin_of_sentence|>",
            "<ÔΩúend‚ñÅof‚ñÅsentenceÔΩú>",
            "<|end_of_sentence|>",
            "<ÔΩúend‚ñÅof‚ñÅtextÔΩú>",
            "<|end_of_text|>",
        ]

        for token in tokens_to_remove:
            answer = answer.replace(token, "")

        return answer.strip()

    # –¢–µ—Å—Ç 1: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ
    answer = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>"
    result = clean_tokens(answer)
    assert result == "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    assert "<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>" not in result

    # –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    answer = "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏ ‚Äî –ú–æ—Å–∫–≤–∞.<|begin_of_sentence|>"
    result = clean_tokens(answer)
    assert result == "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏ ‚Äî –ú–æ—Å–∫–≤–∞."
    assert "<|begin_of_sentence|>" not in result

    # –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    answer = "<ÔΩúend‚ñÅof‚ñÅtextÔΩú>–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>"
    result = clean_tokens(answer)
    assert result == "–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"

    # –¢–µ—Å—Ç 4: –¢–µ–∫—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
    answer = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤"
    result = clean_tokens(answer)
    assert result == "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤"

    # –¢–µ—Å—Ç 5: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    answer = ""
    result = clean_tokens(answer)
    assert result == ""

    # –¢–µ—Å—Ç 6: –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã (–¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è)
    answer = "   –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏   "
    result = clean_tokens(answer)
    assert result == "–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"


def test_multiple_tokens_removal():
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""

    def clean_tokens(answer: str) -> str:
        if not answer:
            return answer

        tokens_to_remove = [
            "<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>",
            "<|begin_of_sentence|>",
            "<ÔΩúend‚ñÅof‚ñÅsentenceÔΩú>",
            "<|end_of_sentence|>",
            "<ÔΩúend‚ñÅof‚ñÅtextÔΩú>",
            "<|end_of_text|>",
        ]

        for token in tokens_to_remove:
            answer = answer.replace(token, "")

        return answer.strip()

    # –¢–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
    answer = (
        "<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞. "
        "<|end_of_sentence|>–°–µ—Ä–µ–¥–∏–Ω–∞. "
        "<ÔΩúend‚ñÅof‚ñÅtextÔΩú>–ö–æ–Ω–µ—Ü<|begin_of_sentence|>"
    )
    result = clean_tokens(answer)

    # –í—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã
    assert "<ÔΩúbegin‚ñÅof‚ñÅsentenceÔΩú>" not in result
    assert "<|begin_of_sentence|>" not in result
    assert "<ÔΩúend‚ñÅof‚ñÅsentenceÔΩú>" not in result
    assert "<|end_of_sentence|>" not in result
    assert "<ÔΩúend‚ñÅof‚ñÅtextÔΩú>" not in result
    assert "<|end_of_text|>" not in result

    # –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
    assert result == "–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞. –°–µ—Ä–µ–¥–∏–Ω–∞. –ö–æ–Ω–µ—Ü"


@pytest.fixture
def mock_config():
    """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç Config"""
    return Config(
        telegram_token="test_token",
        openai_api_key="test_key",
        openai_base_url="https://test.api.com",
        openai_model="test-model",
        max_tokens=1000,
        temperature=0.7,
        max_context_messages=10,
        openai_timeout=30,
    )


@pytest.mark.asyncio
async def test_llm_rate_limit_error(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ RateLimitError"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        mock_instance.chat.completions.create = AsyncMock(
            side_effect=RateLimitError(
                "Rate limit exceeded", response=MagicMock(status_code=429), body=None
            )
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" in result
        assert "‚ö†Ô∏è" in result


@pytest.mark.asyncio
async def test_llm_timeout_error(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ APITimeoutError"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        mock_instance.chat.completions.create = AsyncMock(
            side_effect=APITimeoutError(request=MagicMock())
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è" in result
        assert "‚è±Ô∏è" in result


@pytest.mark.asyncio
async def test_llm_connection_error(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ APIConnectionError"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        mock_instance.chat.completions.create = AsyncMock(
            side_effect=APIConnectionError(request=MagicMock())
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" in result
        assert "‚ùå" in result


@pytest.mark.asyncio
async def test_llm_status_error_404(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ APIStatusError (404)"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance

        mock_response = MagicMock()
        mock_response.status_code = 404

        mock_instance.chat.completions.create = AsyncMock(
            side_effect=APIStatusError(message="Not found", response=mock_response, body=None)
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in result
        assert "‚ùå" in result


@pytest.mark.asyncio
async def test_llm_status_error_500(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ APIStatusError (500)"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance

        mock_response = MagicMock()
        mock_response.status_code = 500

        mock_instance.chat.completions.create = AsyncMock(
            side_effect=APIStatusError(
                message="Internal server error", response=mock_response, body=None
            )
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ LLM: 500" in result
        assert "‚ùå" in result


@pytest.mark.asyncio
async def test_llm_unexpected_error(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        mock_instance.chat.completions.create = AsyncMock(
            side_effect=ValueError("Unexpected error")
        )

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in result
        assert "‚ùå" in result


@pytest.mark.asyncio
async def test_llm_empty_response(mock_config):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
    with patch("services.llm.AsyncOpenAI") as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance

        mock_response = MagicMock()
        mock_response.choices = []

        mock_instance.chat.completions.create = AsyncMock(return_value=mock_response)

        result = await get_llm_response([{"role": "user", "content": "test"}], mock_config)

        assert "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" in result
        assert "ü§î" in result
