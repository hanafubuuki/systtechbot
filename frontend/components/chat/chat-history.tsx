/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
 */

'use client'

import { useEffect, useRef } from 'react'
import { ChatMessage } from './chat-message'
import { Loader2 } from 'lucide-react'
import type { ChatMessage as ChatMessageType } from '@/types/api'

interface ChatHistoryProps {
  messages: ChatMessageType[]
  isLoading?: boolean
}

export function ChatHistory({ messages, isLoading = false }: ChatHistoryProps) {
  const bottomRef = useRef<HTMLDivElement>(null)

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, isLoading])

  return (
    <div className="flex flex-col">
      {messages.length === 0 && !isLoading && (
        <div className="flex h-full items-center justify-center text-center text-muted-foreground">
          <div>
            <p className="mb-2 text-lg font-medium">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daily Reporter! üëã
            </p>
            <p className="text-sm">
              –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.
            </p>
            <div className="mt-4 space-y-2 text-xs">
              <p className="font-medium">–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ systtech:</p>
              <ul className="list-inside list-disc text-left">
                <li>–ù–∞–¥ –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —è —Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è?</li>
                <li>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞—á—É X?</li>
                <li>–ü–æ–∫–∞–∂–∏ –º–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é</li>
                <li>–ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤—á–µ—Ä–∞?</li>
              </ul>
              <p className="mt-2 text-muted-foreground/70">
                –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É
              </p>
            </div>
          </div>
        </div>
      )}

      {messages.map((msg, index) => (
        <ChatMessage
          key={index}
          role={msg.role}
          content={msg.content}
          timestamp={new Date()}
        />
      ))}

      {isLoading && (
        <div className="mb-4 flex items-center gap-2 text-muted-foreground">
          <Loader2 className="h-4 w-4 animate-spin" />
          <span className="text-sm">AI –¥—É–º–∞–µ—Ç...</span>
        </div>
      )}

      <div ref={bottomRef} />
    </div>
  )
}

